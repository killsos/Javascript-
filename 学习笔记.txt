#1

ECMAScript 和 Javascript

网景 livescript 后来改为 Javascript

JS引擎:

Mozilla      SpiderMonkey

Microsoft    JScript

Google       v8

Apple        javascriptCore

JIT  实时编译

just in compilation

通过编译javascript源码为字节码来加速javascript的执行速度

标准与实现

实现是按照标准与规范的实现

javascript和JScript都可以客户端和服务器端运行 只是解释引擎

javascript服务端解释引擎是Netscape服务器Livewire
JScript与VBscript使用相同的服务端解释引擎 属于ASP语法

脚本语言: 二进制方式  脚本方式

#2
浏览器的发展
美国伊利诺斯大学  Mosaic浏览器

#3 网页中javascript
<script></script>

defer属性 用来通知浏览器 这段脚本代码不会产生任何文档内容

<script src="script.js"></script>

没有 defer 或 async，浏览器会立即加载并执行指定的脚本，
“立即”指的是在渲染该 script 标签之下的文档元素之前，
也就是说不等待后续载入的文档元素，读到就加载并执行

<script async src="script.js"></script>

有 async，
加载和渲染后续文档元素的过程将
和 script.js 的加载与执行并行进行（异步）

<script defer src="myscript.js"></script>

有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步）
但是 script.js 的执行要在所有元素解析完成之后
DOMContentLoaded 事件触发之前完成。

https://segmentfault.com/q/1010000000640869

async与defer组合:

1. 如果定义async 脚本是异步的

2. 如果没有async 定义defer 脚本会在文档解析DOMContentLoaded完成执行

3. 如果async defer 同时没定义 脚本会被理解下载 下载完成后立即执行

noscript
noscript 元素用来定义在脚本未被执行时的替代内容（文本）
此标签可被用于可识别 <script> 标签但无法支持其中的脚本的浏览器
仅在下列情况被渲染:
1 用户浏览器被设置为不能执行脚本

2 用户浏览器不支持script元素调用的脚本元素

默认脚本语言
通过meta指定 

#3
声明与命名变量

1 一条声明语句可以声明多个变量 用逗号隔开
00.js

2 一条声明语句可以声明多个变量 用逗号隔开
01.js
这个语句所有变量都是该语句的声明操作符控制

3 javascript区分变量大小写
02.js

变量名与标识符的命名规范
1. 首字符必须为 字母 下划线 美元符号
2. 除去首字符后面可以是 字母 数字 下划线 美元符号
3. 变量名不能是关键字

变量的数据类型

简单 原始数据类型
布尔 字符 数字 undefined null

字符串转义:
\n  换行      10
\r  回车      9
\'  单引号    27
\"  双引号    22

null 空值

数字：
八进制     前缀是0  后面数字0-7之间
十六进制   前缀是0x 后面数字0-F之间

八进制和十六进制可以是负数 但不能是小数

数字常量: Infinity  NaN

复杂数据类型:
数组

对象

undefined:
未初始化的变量 未初始化对象属性

undefined用于不同的数据类型转换结果也不同

String()    返回字符串undefined

Number()    返回NaN

Object()    返回新的对象实例

null == undefined // true

null === undefined // false

使用一个var可以同时声明多个变量的值 变量之间使用都好隔开

var a = true, b = 123;

var关键字在定义变量的时候为多个变量赋相同的值

var  a =  b  = c = 1;
// 但是有问题 b c 是全局变量
03.js


变量提升:
1. 全局变量声明提升到最顶部
2. 函数内变量声明提升函数最顶部

3. 当遇到变量名与函数名相同  函数名优先
03.js

变量分为:按值传递 按引用传递


内存规则: 堆和栈

堆和栈都是运行时内存中分配的一个数据区 因此称之为 堆区 和  栈区
但两者存储的数据类型和处理速度不同

堆 heap 用于处理复杂数据类型分配空间
例如数据 对象 它们都是在运行时动态分配内存 因此存取速度慢

栈 stack 用于存储基本数据类型和对象的引用
优势存取速度比堆快
并且栈内的数据可以共享
缺点是存在栈中的数据大小与生存期必须是确定 缺乏灵活性

栈的使用规则:
栈最重要特性是: 数据共享
04.js


堆得使用规则:
05.js

易犯的错误:
06.js

逻辑等于 与 逻辑全等
逻辑等于 首先将变量转成相同的数据类型
然后进行对比

逻辑全等 首先比较数据类型 然后看是否引用的同一个数据
07.js


数据类型转换:
显式转换  隐式转换

命名方法:
1. 帕斯卡命名
所有单词的第一个字母大写 其他字母小写

2. 驼峰命名
第一个单词外 其他单词第一个字母大写 其他字母小写

3. 匈利亚命名
一个字母前缀 用于只是作用域 类型的信息
然后是变量的功能描述信息
功能描述信息是首字母大写的一个或多个单词的组合
该单词往往要指明变量的用途


重构:
一个文件超过500行
一个函数超过30行

严格模式:
全局严格  函数严格
"use strict"

1. 变量必须先声明后使用
2. 删除全局变量 全局函数 或者 删除函数参数 会报错
3. 不能重复定义相同属性
4. arguments属性是只读
5. arguments.caller arguments.callee 不能用
arguments.callee  当前被调用的函数
arguments.caller  谁调用了当前执行的函数
08.js

6. 不能eval
7. 不能用with
with会引入一个上下文环境

8. 不能八进制

运算符:

1 算术运算符

+ - * /  加减乘除

2 累加累减

++ -- 分前后两种

3 赋值运算符
=
+=
-=
*=
/=
%=
&= 按位与
|= 按位或
<<=
=>>
=>>>
^=

4 字符串运算符
+ 连字符

多个数字 加法
单个数字与其他类型的数据使用+ 首先都转为字符串 然后连接
多个个数字与其他类型的数据使用+ 从左向右执行

5 比较运算符

<
>
<=
=>
==
===
!=
!==

6 逻辑运算符

&&
||
！
&&=
||=

7 特殊值比较

NaN == NaN //false
NaN === NaN //false

null == undefined //true
null != undefined //true
null >= undefined //true
null <= undefined //true


null === undefined // false 它们不是对象
null == undefined //true

09.js

逻辑等于 与 逻辑全等
逻辑等于 首先将变量转成相同的数据类型
然后进行对比

逻辑全等 首先比较数据类型 然后看是否引用的同一个数据

7 位运算符

&
|
~
^
<<
>>
>>> 无符号右移

8 其他运算符

[] 下标运算符

,  逗号运算符 返回最右一个值

(express1)？(express2)：(express3) 三元运算符

in 

instanceof

new 

{}  定义一个块

() 分组运算符

typeof
返回值：
undefined --- undefined
null --- object
true/false --- boolean
Number --- Number
Number --- Number
object(没有实现[[Call]]属性的对象) --- object
object(实现[[Call]]属性的对象) --- function
symbol() --- symbol

object(host) --- Object.prototype.toString.call(obj)  === '[object Array]'

Array Set  WeakSet Map WeakMap
10.js

void 计算机表达式 然后放弃其值 返回undefined


#4 流程控制

1. 语句和语句块
语句是由一个或多个表达式、关键字或者运算符组成

语句块是由{}括起来

if(){}

if(){}
else{}

if(){

}else if(){

} else {

}

switch (express){
    case value: 
    break;

    default:
    break;
}


do {

} while()

while(){

}

for(expr1; expr2; expr3){
    break;
    continue;
}

遍历属性名
for(var in object){
    break;
    continue;
}

自定义原型属性可以枚举

遍历属性值
for each(var in object){

}

with语句 引用某个特定对象的方法和属性
whit(object){
    statement(s)
}

#5 全局函数

1. eval函数
计算表达

2. 转义函数
escape()
将参数转换为字符串
并以URL编码格式进行编码
在这种格式中 所有空格 标点 重音符号
以及其他非ASCII字符都用%xx十六进制序列
编码代替 
例如:
空格      %20
叹号！    %21
双引号"   %22
井号#     %23
$         %24
%         %25
&         26
'         27

escape() 
unescape()

用escape/unescape处理非ASCII字符时会出错
它们不能用来堆unicode进行编解码
推荐用encodeURI/decodeURI


encodeURI函数将文本字符串编码为一个有效的统一资源标识符URL
encodeURI(URLString)
URLString---一个编码的URI的字符串

encodeURI对以下字符不编码:
保留字符: 
反向转义字符:
#号
---反向decodeURI()

encodeURI函数单靠自身不能形成HTTP GET请求或POST请求
因为 & + = 不会编码
所以要使用encodeURIComponent()
decodeURIComponent()

parseFloat()  非浮点数 返回值NaN

parseInt()   非整数 返回值NaN

以0开头为8进制

以0x开头为16进制

#6 函数

函数提升
12.js

匿名函数

函数语句与函数表达式的区别:
1. 函数定义

关键字 function

函数返回值 用return

2. 函数调用

3. 函数中定义参数的初始值

通过arguments对象来完成

4. 嵌套函数的定义和调用
13.js

5. 条件分支定义函数的问题
14.js

6. 匿名函数
没有命名的函数
15.js

7. 函数表达式与函数语句的区别

* 函数语句会预解析  函数表达式不会预解析

* 函数表达式可以作为另一个函数或方法的参数

* 函数表达式可以通过设为null 或 delete方式进行垃圾回收

* 函数语句不可以通过设为null 或 delete方式进行垃圾回收
16.js

8. 匿名自执行函数

形式1:

(function(){
    
})()

形式2:
(function(a,b,...){
    
})(arg1,arg2,...)

由于函数是一个封闭的作用域范围
并且可以嵌套函数
所以可以使用这种匿名函数自执行函数
来实现封装自己的所有函数和变量
从而避免来自多个开发者的多个函数
相互冲突
并且由于它们位于同一个函数中
所有可以相互引用

由于外部无法引用函数内部的变量
因此在执行完后很快就会被释放
关键是这种机制不会污染全局对象
同时相当于定义一个命名空间
来自不同开发镇的功能位于
自己的命名空间内

哪如何访问匿名自执行函数里面的函数和对象呢？
同时是为函数定义一个参数
该参数是一个对象
在里面的函数或变量前加上一个对该对象的引用
这样该函数或变量就成为该对象的方法或属性
17.js

9. 使用Function类定义函数

var functionName = new Function([arg1, arg2,...], functionBody)

arg 是参数 是字符串

functionBody 是函数体
18.js

10. 变量 作用范围 和 生命周期

变量作用范围: 是指一个区域
只有该区域内变量才是已知
并且才可以被引用

javascript变量也有自己的作用范围
scope---也称为作用域
以及生命周期

在Javascript的程序执行时
系统会在内存中保留一块全局变量的区域
可以直接使用变量名访问变量值

变量的作用域由声明的位置决定
声明一个变量同时指出一个变量的作用范围
在一个确定的范围中 变量名应该是唯一的

变量作用域分为 函数级变量 和 全局级变量

如果不用var声明变量 就是会变成全局变量
同时在严格模式下会报错

11. 形参和实参

形参 形式参数
是定义函数名和函数体时使用的参数
目的是用来接收调用该函数时传进的参数

实参 实际参数
是调用时传递给函数的参数

在函数调用时 形参和实参是不同的变量
它们在内存中位置不同
形参将实参内容复制一份
在该函数运行结束的时候
形参被释放
而实参内容不变
---
这是上面只对基本数据类型是对
而对对象是错误的 刚好相反
19.js

总的来说
形参只是为了完成某一目的而定义在函数里的
当进行函数调用时
会临时给形参分配一个存储空间
当该函数调用结束时候
也就释放了这个存储空间

如果形参和函数内部变量名相同的情况
20.js

12. arguments对象
arguments对象可以直接在函数内使用
是Function类的一个属性
用于获取传递给函数的参数
但是如果形参名也是arguments
这就意味着形参arguments覆盖了语言本身提供的arguments对象
21.js


13. 闭包函数
闭包closure是一个函数
通常称为闭包函数或绑定函数
该函数运行在一个特定环境中
该环境定义了一些本地变量
当该函数被调用时
仍可以使用这些本地变量

什么是闭包函数
当一个函数在不位于它所处环境
(变量作用范围)中调用时候
仍能够使用本地变量
这就是闭包函数的显著特征

1) 作为值从函数返回的函数时闭包函数
22.js

2) 利用变量作用范围也可以形成闭包函数
作为参数传递给函数的函数或作为值从函数返回的
函数都是闭包函数
23.js

闭包函数核心是:
函数所能的变量取决于声明函数的位置
不取决于调用位置

核心:是函数无论在哪里调用
仍可以访问它所处环境的变量
而这个变量在函数被调用的环境中是被其他程序
访问不到的

闭包常用环境
在执行函数之前就向函数传递参数

function outer(param){
    return (function(){
        console.log(param);
    })
}

var funcRef = outer('123');

setTimeout(funcRef, 1000)

易犯的错误:
24.js

#7 面向对象OOP

1. 面向对象编程 oop object oriented programming

抽象是一种归纳或总结 对象是现实世界物体特征的实体

一切皆是对象

类是对象的抽象

面向对象编程的实质性内涵是将所有的业务逻辑单元
都视为一个对象
并且 类也不是唯一的用来完成面向对象编程的方法
例如 javascript使用构造器和原型来完成面向对象开发

程序设计:
对象 = 数据 + 作用于这些数据上的操作(算法)

面向对象程序设计:
可重用性
易于维护性

面向对象基本特征:
封装性  encapsulation
继承性  inheritance
多态性  ploymorphic  根据参数不同

重载和覆载是多态的实现方式

面向对象和结构化程序设计区别

结构化程序设计
采用了模块分级与功能抽象
和自顶向下 分而治之的方法
这是一种面向过程的设计思想

面向过程编程的任务是将一个程序分割成
变量的集合  数据结构  子程序 三部分

面向对象这是一个程序分割成对象

面向对象编程                     面向过程编程
Methods 方法                    Functions 函数
Objects 对象                    Modules   模块
Message 信息                    Arguments 参数
Attribute 属性                  Variable  变量

类 方法 属性  继承

通过 new 关键字

类的定义
类声明  类体

类名首字母大写 按照帕斯卡命名法的规范为类命名

构造器方法是没有返回值 当创建该类实例时候 必需调用该类的构造方法

所有的构造器都是类
但是并非所有的类都是构造器

内建的类是使用构造器创建的类
但是宿主对象 window navigator 可能不是

对于实例使用constructor属性
便可以获取实例的构造器方法
25.js

静态类无需实例化就可以直接调用类的方法和属性

访问对象属性
.符号  
['属性名']中括号

调用对象方法
.符号  
['方法名']中括号

调用静态方法和属性
静态就是无需实例 直接调用
26.js

使用this关键字定义方法和属性

使用prototype定义方法和属性
每个类都有prototype属性
该属性是一个静态属性
因此无需实例化
默认是一个空对象
27.js

关于prototype和__proto__的区别
每个构造器方法都有一个prototype属性
该属性是在定义构造器方法时自动创建的
prototype属性代表用该函数创建的类的默认属性值
如果将方法分配给类的prototype属性
则该类的任何新创建的实例都可以使用这些方法

类的每个新实例也都有一个__proto__属性
用于引用创建它的构造器方法的prototype属性
可以使用prototype和__proto__属性
扩展类 这样可以以面向对象的方式重新使用代码
28.js

IE不支持__proto__

使用return语句定义方法和属性
可以使用return语句定义方法和属性
只需为构造方法定义返回值
在return语句中声明一个对象
该对象可以利用对象命名定义属性和方法
29.js

使用get/set存取器方法定义属性
只读属性  getter
读写属性  setter

get基本形式 需要加入get关键字
set基本形式 需要加入set关键字
30.js

类体内使用this
this表示类的实例自身
31.js

闭包方法---绑定方法内this
32.js

this指向执行环境
如果构造方法不是使用new创建实例
而是直接像调用函数那样调用
那么this就不会代表该类的实例

改变this方法：
apply  call  bind

public 

private

检测继承关系
obj.prototype.constructor = class
检测一个子类是否继承于某个基类

自己实现$super的方法
33.js


类的组合
房子 由  窗子 和 门 构成
并且不是继承关系
而是组合关系
34.js

is-a 兔子属于动物     继承关系

has-a 兔子有头和腿    组合关系


聚合 Aggregation 
组合 Composition

聚合和组合两者都是表示一个类"拥有"另一些类
表示组合关系
但是有差别:

聚合是弱的拥有关系
体现A可以包含B 但是B不是A的一部分

大雁  雁群
每只大雁属于一个雁群
一个雁群可以多只大雁
这是聚合关系

合成是强的拥有关系
体现严格的部分与整体关系

房子与窗子和门

静态成员与继承没有关系

静态方法中不能使用this

静态类: 如果一个类中的成员全部是静态成员
静态类中静态方法是不能被实例化
当用户企图实例化 抛出异常

JavaScript中判断函数是new还是()调用的区别说明
35.js

通过实现单例模式 36.js

重载与覆载

重载是参数个数 参数的类型

覆载是重写  覆写  覆盖

静态方法和属性不能继承 不能覆载

原型链的本质

每一个类有一个静态属性prototype
该属性值是对象 称为原型对象
即便是赋值非对象 也会被改为对象
38.js

通过prototype属性找到基类
形成一个原型链条 称为原型链
原型链尽头是null

按照ECMA262标准的规定:
当一个类定义时,它有原型对象
这个原型对象必须声明有多个内部特定的属性
作为类的特性

其中两个内部属性就是Prototype和Class

标准还规定:
在创建类的实例时
该实例隐式的包含有对自身原型对象的引用
因此实例中包含有Prototype的定义

Prototype
表示该类的父类的原型对象
注意是父类的原型对象
并非当前类的原型对象
一般用__proto__访问
不过IE封闭该属性

注意区分内部属性Prototype与静态属性prototype

Class
属性表示类名 是一个字符串
Javascript的类名都是内建

当内建类Array定义时 它有原型对象
并定义了内部属性Prototype和Class
{
    Prototype: object的原型对象
    Class: 'Array'
}

每个内建Javascript类的内部属性Prototype的值都是Object对象
因为它们都直接继承自Object
除了Object自身Prototype属性
因为Object类是根类
所以它没有父类
因此Object的Prototype属性值为null

所以通过内部属性Prototype属性构成继承关系

访问内部属性[Prototype]
内部属性Prototype是当前类的父类的原型对象

内部属性Prototype本来是不允许JS程序中访问的
等火狐浏览器公开一个名为__proto__的属性
用于访问内部属性Prototype

所以全等式
Array.prototype.__proto__=== Object.prototype是成立的

Array.prototype指向自己父类的引用
39.js

(new Array()).__proto__.__proto__=== Object.prototype
当对实例应用__proto__属性时
返回当前实例所表示类的原型对象的引用

所以这句话 (new Array()).__proto__ === Array.prototype
40.js


实例的__proto__指向类的原型对象

类的原型对象隐藏两个属性Prototype和Class
class.prototype[Protype] = 父class.prototype

类的原型对象中属性Prototype指向父类的prototype


prototype的作用---原型链的实现
按照ECMA262标准的规定
每一个类都有一个prototype属性标识类的原型对象
是静态属性
作用: 继承 和 分享属性

实现继承
使用prototype静态属性实现继承
是通过改变内部属性[Prototype]的值来实现的

function Person(){}
function Child(){}

Person.prototype = {
    Prototype: Object.prototype
    Class: 'Person'
}

Child.prototype = {
    Prototype: Object.prototype
    Class: 'Child'
}

假如类Person和类Child存在继承关系
通过:
child.prototype = new Person()
来实现

因为Person实例也隐式包含有Person类的
内部属性[Prototype]
因此执行这个赋值操作时
Javascript引擎可以获取Person实例的
[Prototype]属性值
然后更改Child的内部属性[Prototype]
这时候:
Child.prototype = {
    Prototype: Person.prototype
    Class: 'Child'
}

所以使

Child.prototype.__proto__ = Object.prototype

分享属性/方法
ECMA262有一个明确规定:
在创建类的实例时,该实例隐式地包含有对自身原型对象的引用
因此 实例中也包含有内部属性[Prototype]

一个类的所有属性定义都在原型对象上
当类的实例访问一个属性时
Javascript引擎就会去原型对象上查找属性的定义
然后再执行

由于原型对象中中也包含有内部属性[Prototype]
因此 这一规定使得可以共享属性


__proto__和prototype属性的区别:
prototype属性是一个静态属性
__proto__属性是一个实例属性

prototype属性表示类的原型对象
__proto__属性表示原型对象中定义的内部属性[Prototype]的值

IE不支持__proto__属性

类的每个新实例都有一个__proto__属性
指向创建它的构造方法的prototype
也就是该类的原型对象

所以 (new Array('abc')).__proto__ === Array.prototype

__proto__属性同时还有同名的静态__proto__属性
也是返回原型对象
但浏览器并没有实现如下等式:
Array.__proto__ === Array.prototype

也就是说 静态__proto__属性 并不等于 静态prototype属性
一般不要是静态__proto__属性__proto__属性
41.js


ES5中Object.getPrototypeOf()可以得到指定对象的prototype属性
即获得一个实例的原型对象

ES3中没有规定可以获取实例的原型对象
但是 非一些浏览器可以使用__proto__属性获得

所以
Object.getPrototypeOf(new Array('123')) === Array.prototype

判断原型链方法:
Object.prototype.isPrototypeof()

查看自有属性而非原型链属性

Obj.hasOwnProperty()

属性是否枚举
obj.propertyIsEnumerable()

属性描述符
value
writable
enumerable
configurable


object.defineProperty(obj, prop, desc)

object.defineProperty(obj, prop, {
    get: function(){},
    set： function(){}
})

object.defineProperties()

object.getOwnPropertyDescriptor()


枚举属性:
Object.keys()

Object.getOwnPropertyNames()


密封对象和冻态对象

Object.preventExtensions(obj)
Object.seal(obj)
Object.freeze(obj)

Object.preventExtensions(obj) 不能添加
Object.isExtensible(obj)

Object.seal(obj)   不能添加 删除
Object.isSealed(obj)

Object.freeze(obj)  不能添加 删除 修改
Object.isFreeze(obj)

密封只对类的实例不对类

Object.create(proto, props)

obj.defineProperties(props)


正则表达式与字符串

数组 多维数组 复合数组
数组浅克隆
concat slice

数组深度克隆


复合数组 称为关联数组 哈希hash 映射Map

for in 针对键
for each in针对值

日期和时间


Function和arguments类

Function类
有三个方法apply call bind

bind返回值一个新函数 this已经绑定好了


Arguments类与arguments属性
arguments.callee 当前正在执行的函数
arguments.caller 当前正在执行的函数的调用者

BOM browser object Modules

window对象
document
location
navigator
event
histroy
screen

定时器
setInterval
setTimeout

alert
confirm
prompt
showModalDialog(url)

打印 window.print()

window.open(url, name, )
window.close()
window.stop()

获取窗口引用
window[index]

window[name]

window.focus()

window.blur()

window.locationbar.visible

window.menubar.visible

window.personalbar.visible

window.scrollbar.visible

window.statusbar.visible

window.toolbar.visible

浏览历史管理
history对象方法与属性
length
back()
forward()
go()

go(0) 刷新当前网页
与location.reload()等效

go(1) history.forward()

HTML5: 添加与替换历史项 
pushState(data, title, url) 添加新的历史项
但是不会触发页面刷新
43.html

replaceState(data, title, url) 更新当前的历史项
但是不会触发页面刷新

两者区别是：push是添加一项历史记录 replace替换当前记录

每当同一个文档的浏览历史即History出现变化
会触发popstate事件

仅仅调用pushState或replaceState并不会触发popstate事件
只有用户点击浏览器倒退按钮或者前进按钮
或者用JS调用back forward go方法才会触发
同时又一个PopStateEvent对象

当使用前进 后退按钮
还会触发pageshow事件
当网页变成当前网页

还会触发pagehide事件
当网页从当前网页改变为历史网页

这两个事件对象包含一个名为persisted属性
如果网页是新加载是false
返之是true

解析地址location
描述某一个窗口对象所打开的URL地址

window.open返回一个window对象

属于不同协议或不同主机的两个地址之间不能互相引用对方的location对象
这是安全需要

location.hash  #号文字
location.host  主机名 端口号
location.hostname 主机名
location.pathname 路径名
location.port     端口号
location.protocol 协议名
location.search   ?后面

hash改变 会触发hashchange事件
window.hashchange

location.assing()   加载一个新文档
location.reload（true/false） 刷新网页
是否从缓存中重新加载

location.replace()  替代当前网页
这个方法替换 不能用后退

location.resolve()
相对URL转为绝对URL

获取浏览器信息navigator
appName  浏览器名称
appVersion  浏览器版本
onLine      是否在线
platform    操作系统
userAgent   用户代码字符串  也就是HTTP请求报头中User-userAgent

自定义架构处理
window.navigator.registerProtocolHandler()
可以将自己注册为特定架构(通信协议)的处理者
参数 schme  url title
---点击右键链接调用出邮箱端
45.html

自定义内容类型处理
window.navigator.registerContentHandler()
可以为特定MIME类型的内容自定义处理器
参数 mimeType url title

检测脱机模式
navigator.onLine

1 window  document  document.body 注册函数

2 document.body document使用online offline属性注册函数

3 body使用online offline属性注册函数

W3C规定windowonline offline属性注册函数 但是浏览器未实现

screen对象
提供屏幕对象


clipboardData对象
剪贴板对象
setData()
getData()
clearData()

web存储: localStorage sessionStorage webSQL


通信技术:
server-Sent event

var source = new EventSource(url);

source.onopen = function

source.onmessage = function

source.onerror = function

source.close()

source = null

基于事件流 text/event-stream utf8

最好基于用web worker

web socket 套接字

socket = new WebSocket(host);

socket.onopen = fn

socket.onmessage = fn

socket.close = fn

scoket.close()

socket = null

